version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: ug-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: ug_management
      MYSQL_USER: ug_user
      MYSQL_PASSWORD: ug_password
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/init:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    networks:
      - ug-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: ug-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123456
    networks:
      - ug-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ug-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ug_management
      DB_USERNAME: ug_user
      DB_PASSWORD: ug_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123456
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    ports:
      - '15001:15001'
    depends_on:
      - mysql
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - ug-network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ug-frontend
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - backend
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ug-network

  # Nginx 反向代理 (可选，如果需要更复杂的配置)
  nginx:
    image: nginx:alpine
    container_name: ug-nginx
    restart: unless-stopped
    ports:
      - '8080:80'
      - '8443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - ug-network

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ug-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ug-network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ug-grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123456
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ug-network

  # 日志收集 - ELK Stack (可选)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ug-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    networks:
      - ug-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ug-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./backend/logs:/var/log/app:ro
    ports:
      - '5044:5044'
    depends_on:
      - elasticsearch
    networks:
      - ug-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ug-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    networks:
      - ug-network

  # 数据库可视化工具 - ChartDB
  chartdb:
    image: chartdb/chartdb
    container_name: ug-chartdb
    restart: unless-stopped
    ports:
      - '3002:3000'
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ug_management
      - DB_USER=ug_user
      - DB_PASSWORD=ug_password
      - DB_TYPE=mysql
    networks:
      - ug-network
    depends_on:
      - mysql

  # 数据分析工具 - WrenAI
  wrenai:
    image: canner/wrenai
    container_name: ug-wrenai
    restart: unless-stopped
    ports:
      - '3003:3000'
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ug_management
      - DB_USER=ug_user
      - DB_PASSWORD=ug_password
      - DB_TYPE=mysql
      - OPENAI_API_KEY=your_openai_api_key
      - LLM_PROVIDER=openai
    networks:
      - ug-network
    depends_on:
      - mysql

  # 无限画布作图工具 - Drawnix
  drawnix:
    image: drawnix/drawnix
    container_name: ug-drawnix
    restart: unless-stopped
    ports:
      - '3004:3000'
    networks:
      - ug-network

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# 网络
networks:
  ug-network:
    driver: bridge